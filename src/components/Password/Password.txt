import { useEffect, useState } from "react";
import PasswordContract from "../../truffle/build/contracts/Password.json";
// import PasswordFactory from "../../truffle/build/contracts/Password.json"; 

import { CenterDiv,CodeDiv, Button, Title, Code,Break,Box } from "./index";


const Password = ({ web3, nId, account }) => {
  let Contract = new web3.eth.Contract(
    PasswordContract.abi,
    PasswordContract.networks[nId]?.address
  );

  let Factory;
  const [contractAddress, setContractAddress] = useState();
  const [contractOwner, setContractOwner] = useState();
  const [locked, setLocked] = useState();
  const [balance, setBalance] = useState();
  const [hashCode, setHashCode] = useState("");
  const init = async () => {
    setContractAddress(await Contract._address);
    if (contractAddress) {
      setContractOwner(await Contract.methods.owner().call());
      setLocked(await Contract.methods.locked().call());
      setBalance(await Contract.methods.balanceOf().call());
    }
  };
  useEffect(() => {
    init();
  });

  const handleCodeUnlock = async (event) => {
    event.preventDefault();
    let code = web3.utils.asciiToHex(hashCode);
    // console.log(web3.utils.hexToAscii(hashCode));
    await Contract.methods.unlock(hashCode).send({ from: account });
    let result = await Contract.methods.locked().call();
    console.log(result);
  };

  const handleCodeInput = () => {};
  const isLocked = () => {
    alert("Lock Status: " + locked);
  };
  const withdraw = () => {};
  const balanceOf = () => {
    alert(balance);
  };

  const checkOwner = () => {
    alert(contractOwner);
  };

  const fallBack = () => {
    // let txparam = {
    //     to:
    //     from: account,
    //     value:"",
    // }
  };

  const validate = () => {
    alert("Hello validation testing");
  }
  return (
    <>

<CenterDiv>
        <Title>Password</Title>
        <Box>
        A friend of yours reached out to you for help because he knows that youâ€™re skilled in hacking and
        bypassing passwords. He told you that he wants to use his brothers Ether in his account because
        he does not have enough. While talking about this, he mentioned that his brother is very
        precautious when it comes to his crypto wallets and accounts that he setup 2 layers of protection
        to prevent hackers.
        </Box>
        <Break></Break>
        <Title>Objectives</Title>
        <Box>1. Unlock the vault and its extra layer of protection</Box>
        <Box>2. Take ownership of the account</Box>
        <Box>3. Drain the account of its balance</Box>
        <Break></Break>

        <Title>How To Play</Title>
        <Box>Note: To be able to successfully solve this challenge through Remix, when deploying the contract,
              the player needs to initialize any amount of ether for the balance of the owner. The player also
              needs to input a byte32 hash as the password. 
        </Box>
        <Box>***** LOOK FOR THE VULNERABILITY AT THE SMART CONTRACT *****</Box>
        <Box>1.Open Remix IDE</Box>
        <Box>2. Select Password Workspace</Box>
        <Box>3. Hack the SMART CONTRACT!</Box>
        <Box>Hint: The password is inside the workspace </Box>
        <CodeDiv>
        <pre>
          <Code>
            {" "}
            {` 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Password {
    bool public locked;
    bytes32 private code;
    address public owner;
    constructor(bytes32 _code) public payable{
      locked = true;
      code = _code;
      owner = msg.sender;
    }
    modifier onlyOwner {
      require(msg.sender == owner, "You are not the owner");
      _;
    }
    function unlock(bytes32 _code) public {
    if (code == _code) {
      locked = false;
    }
    }
    function withdraw() public onlyOwner {
      require(locked == false, "The account is locked!");
      payable(owner).transfer(address(this).balance);
    }
    function balanceOf() view public returns(uint) {
      return address(this).balance;
    }
    fallback() external payable{
      require(locked == false && msg.value > 0);
      owner = msg.sender;
    }
}
              `}
          </Code>
        </pre>
      </CodeDiv>
      </CenterDiv>

      
    </>
  );
};

export default Password;
